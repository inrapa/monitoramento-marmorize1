# Painel de Exclus√£o (Acesso restrito)

import streamlit as st
import sqlite3
import pandas as pd
import datetime

st.set_page_config(page_title="üîí Painel de Exclus√£o - MARMORIZE")

st.title("üîí Painel Restrito de Exclus√£o de Dados")

# Autentica√ß√£o simples
senha = st.text_input("Digite a senha de acesso:", type="password")
if senha != "marmorize2025":
    st.warning("Acesso restrito. Digite a senha correta.")
    st.stop()

# Conex√£o com o banco
conn = sqlite3.connect("marmorize.db", check_same_thread=False)
c = conn.cursor()

# Cria tabela de log se n√£o existir
c.execute("""
CREATE TABLE IF NOT EXISTS log_exclusoes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    data TEXT,
    tipo TEXT,
    funcionario TEXT,
    mes TEXT
)
""")
conn.commit()

# Fun√ß√£o para registrar log
def registrar_log(tipo, funcionario, mes="-"):
    c.execute("INSERT INTO log_exclusoes (data, tipo, funcionario, mes) VALUES (?, ?, ?, ?)",
              (datetime.datetime.now().isoformat(), tipo, funcionario, mes))
    conn.commit()

# Exclus√£o de funcion√°rio completo
st.subheader("Excluir Funcion√°rio por Completo")
c.execute("SELECT nome FROM funcionarios")
funcs = [row[0] for row in c.fetchall()]

if funcs:
    func_sel = st.selectbox("Selecionar funcion√°rio para exclus√£o completa", funcs, key="excluir_total")
    if st.button("Excluir Funcion√°rio e todas as vendas", key="btn_excluir_total"):
        registrar_log("Exclus√£o Total", func_sel)
        c.execute("DELETE FROM funcionarios WHERE nome = ?", (func_sel,))
        c.execute("DELETE FROM metas_individuais WHERE nome = ?", (func_sel,))
        conn.commit()
        st.success(f"Funcion√°rio '{func_sel}' e suas vendas foram exclu√≠dos com sucesso!")
else:
    st.info("Nenhum funcion√°rio cadastrado para excluir.")

# Exclus√£o por m√™s espec√≠fico
st.subheader("Excluir dados de vendas por M√™s")
if funcs:
    func_mes = st.selectbox("Selecionar funcion√°rio", funcs, key="func_mes")
    c.execute("SELECT DISTINCT mes FROM metas_individuais WHERE nome = ?", (func_mes,))
    meses = [row[0] for row in c.fetchall()]
    if meses:
        mes_excluir = st.selectbox("Selecionar m√™s para exclus√£o", meses)
        if st.button("Excluir vendas desse m√™s", key="btn_mes"):
            registrar_log("Exclus√£o Mensal", func_mes, mes_excluir)
            c.execute("DELETE FROM metas_individuais WHERE nome = ? AND mes = ?", (func_mes, mes_excluir))
            conn.commit()
            st.success(f"Vendas do m√™s '{mes_excluir}' para '{func_mes}' foram exclu√≠das.")
    else:
        st.info("Funcion√°rio n√£o possui registros mensais.")

# Redefinir dados (zera vendas e metas)
st.subheader("Redefinir Vendas de Funcion√°rio")
if funcs:
    func_reset = st.selectbox("Selecionar funcion√°rio para zerar vendas", funcs, key="reset_func")
    if st.button("Zerar todas as vendas e metas", key="btn_reset"):
        registrar_log("Zeramento de Dados", func_reset)
        c.execute("DELETE FROM metas_individuais WHERE nome = ?", (func_reset,))
        conn.commit()
        st.success(f"Todas as vendas e metas de '{func_reset}' foram zeradas.")

# Visualiza√ß√£o do log
st.subheader("üìÑ Hist√≥rico de Exclus√µes")
df_log = pd.read_sql_query("SELECT * FROM log_exclusoes ORDER BY id DESC", conn)
if not df_log.empty:
    df_log["data"] = pd.to_datetime(df_log["data"]).dt.strftime("%d/%m/%Y %H:%M")
    st.dataframe(df_log, use_container_width=True)
else:
    st.info("Nenhuma exclus√£o registrada at√© agora.")
